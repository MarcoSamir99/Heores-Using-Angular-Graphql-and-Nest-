{"ast":null,"code":"import { map } from 'rxjs';\nimport { GET_HERO } from './graphql/graphql.queries';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nimport * as i3 from \"apollo-angular\";\nimport * as i4 from \"src/generated/graphql\";\nexport class HeroService {\n  constructor(httpClient, messageservice, apollo, heroesGql) {\n    this.httpClient = httpClient;\n    this.messageservice = messageservice;\n    this.apollo = apollo;\n    this.heroesGql = heroesGql;\n  }\n  getHeroes() {\n    const heroes = this.heroesGql.watch().valueChanges.pipe(map(result => result.data.heroes));\n    return heroes;\n  }\n  getHero(id) {\n    const hero = this.apollo.query({\n      query: GET_HERO,\n      variables: {\n        id: id\n      }\n    }).pipe(map(response => response.data));\n    console.log(hero);\n    return hero;\n  }\n}\nHeroService.ɵfac = function HeroService_Factory(t) {\n  return new (t || HeroService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService), i0.ɵɵinject(i3.Apollo), i0.ɵɵinject(i4.HeroesGQL));\n};\nHeroService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HeroService,\n  factory: HeroService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,GAAG,QAAY,MAAM;AAG1C,SAASC,QAAQ,QAAoB,2BAA2B;;;;;;AAQhE,OAAM,MAAOC,WAAW;EAKtBC,YAAqBC,UAAsB,EACjCC,cAA8B,EAC9BC,MAAc,EACdC,SAAoB;IAHT,eAAU,GAAVH,UAAU;IACrB,mBAAc,GAAdC,cAAc;IACd,WAAM,GAANC,MAAM;IACN,cAAS,GAATC,SAAS;EAAiB;EAEpCC,SAAS;IACP,MAAMC,MAAM,GAAG,IAAI,CAACF,SAAS,CAACG,KAAK,EAAE,CAACC,YAAY,CAACC,IAAI,CAACZ,GAAG,CAACa,MAAM,IAAIA,MAAM,CAACC,IAAI,CAACL,MAAM,CAAC,CAAC;IAC1F,OAAOA,MAAM;EACf;EAEAM,OAAO,CAACC,EAAU;IAChB,MAAMC,IAAI,GAAG,IAAI,CAACX,MAAM,CAACY,KAAK,CAAQ;MACpCA,KAAK,EAAEjB,QAAQ;MACfkB,SAAS,EAAE;QACTH,EAAE,EAAEA;;KAEP,CAAC,CAACJ,IAAI,CAACZ,GAAG,CAACoB,QAAQ,IAAIA,QAAQ,CAACN,IAAI,CAAC,CAAC;IACvCO,OAAO,CAACC,GAAG,CAACL,IAAI,CAAC;IACjB,OAAOA,IAAI;EACb;;AAxBWf,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAqB,SAAXrB,WAAW;EAAAsB,YAFV;AAAM","names":["map","GET_HERO","HeroService","constructor","httpClient","messageservice","apollo","heroesGql","getHeroes","heroes","watch","valueChanges","pipe","result","data","getHero","id","hero","query","variables","response","console","log","factory","providedIn"],"sourceRoot":"","sources":["D:\\Prog courses\\Projs\\Graphql\\Tour of Heroes with nestJS\\tour_of_heroes-frontend\\src\\app\\hero.service.ts"],"sourcesContent":["\nimport { Injectable } from '@angular/core';\nimport { Observable, map, of } from 'rxjs';\nimport { MessageService } from './message.service';\nimport { HttpClient } from '@angular/common/http';\nimport { GET_HERO, GET_HEROES } from './graphql/graphql.queries';\nimport { Apollo } from 'apollo-angular';\nimport { Hero } from './heroes/hero';\nimport { HeroesGQL, HeroesQuery, HeroGQL,HeroQuery } from 'src/generated/graphql';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HeroService {\n\n  heroes? : Hero[];\n  hero? : Hero;\n  \n  constructor (private httpClient: HttpClient ,\n    private messageservice: MessageService, \n    private apollo: Apollo,\n    private heroesGql: HeroesGQL,,) { }\n\n  getHeroes(): Observable<Hero[]> {                    \n    const heroes = this.heroesGql.watch().valueChanges.pipe(map(result => result.data.heroes))\n    return heroes;                                 \n  }\n\n  getHero(id: number): Observable<Hero> {\n    const hero = this.apollo.query<Hero> ({\n      query: GET_HERO,\n      variables: {\n        id: id,\n      }\n    }).pipe(map(response => response.data));\n    console.log(hero);\n    return hero;                                 \n  }\n\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}