{"ast":null,"code":"import { HEROES } from './mock-heroes';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./message.service\";\nexport class HeroService {\n  constructor(messageservice) {\n    this.messageservice = messageservice;\n  }\n  //  getHeroes is a method to return the data from file mock-heroes , return array of type Hero\n  getHeroes() {\n    const heroes = of(HEROES); //simulation to respond with array of heroes from mock heroes,of used to return observable\n    return heroes;\n  }\n}\nHeroService.ɵfac = function HeroService_Factory(t) {\n  return new (t || HeroService)(i0.ɵɵinject(i1.MessageService));\n};\nHeroService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HeroService,\n  factory: HeroService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,MAAM,QAAQ,eAAe;AACtC,SAAqBC,EAAE,QAAQ,MAAM;;;AAMrC,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,cAA8B;IAA9B,mBAAc,GAAdA,cAAc;EAAoB;EACxD;EACEC,SAAS;IACP,MAAMC,MAAM,GAAGL,EAAE,CAACD,MAAM,CAAC,EAAuB;IAGhD,OAAOM,MAAM;EAEf;;AAVWJ,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAK,SAAXL,WAAW;EAAAM,YAFV;AAAM","names":["HEROES","of","HeroService","constructor","messageservice","getHeroes","heroes","factory","providedIn"],"sourceRoot":"","sources":["D:\\Prog courses\\Projs\\Angular\\Tour of heroes\\tour_of_heroes\\src\\app\\hero.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Hero } from './heroes/hero';\nimport { HEROES } from './mock-heroes';\nimport { Observable, of } from 'rxjs';\nimport { MessageService } from './message.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HeroService {\n\n  constructor(private messageservice: MessageService) { }\n//  getHeroes is a method to return the data from file mock-heroes , return array of type Hero\n  getHeroes(): Observable<Hero[]> {                    //observable(template) used to wait the server to respond with the data requested, i have to specify the data to be sent in the template\n    const heroes = of(HEROES)                       //simulation to respond with array of heroes from mock heroes,of used to return observable\n  \n\n    return heroes;                                 \n       \n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}