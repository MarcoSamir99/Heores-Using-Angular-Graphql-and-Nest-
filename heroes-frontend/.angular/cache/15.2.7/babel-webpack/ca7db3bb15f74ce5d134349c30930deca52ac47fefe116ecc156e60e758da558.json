{"ast":null,"code":"import { gql } from 'apollo-angular';\nimport * as Apollo from 'apollo-angular';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"apollo-angular\";\nexport const HeroesDocument = gql`\n    query heroes {\n  heroes {\n    name\n    id\n  }\n}\n    `;\nexport class HeroesGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = HeroesDocument;\n  }\n}\nHeroesGQL.ɵfac = function HeroesGQL_Factory(t) {\n  return new (t || HeroesGQL)(i0.ɵɵinject(i1.Apollo));\n};\nHeroesGQL.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HeroesGQL,\n  factory: HeroesGQL.ɵfac,\n  providedIn: 'root'\n});\nexport const HeroDocument = gql`\n    query hero($id: Float!) {\n  hero(id: $id) {\n    name\n    id\n  }\n}\n    `;\nexport class HeroGQL extends Apollo.Query {\n  constructor(apollo) {\n    super(apollo);\n    this.document = HeroDocument;\n  }\n}\nHeroGQL.ɵfac = function HeroGQL_Factory(t) {\n  return new (t || HeroGQL)(i0.ɵɵinject(i1.Apollo));\n};\nHeroGQL.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HeroGQL,\n  factory: HeroGQL.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAASA,GAAG,QAAQ,gBAAgB;AAEpC,OAAO,KAAKC,MAAM,MAAM,gBAAgB;;;AA8ExC,OAAO,MAAMC,cAAc,GAAGF,GAAG;;;;;;;KAO5B;AAKH,OAAM,MAAOG,SAAU,SAAQF,MAAM,CAACG,KAAwC;EAG5EC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHN,aAAQ,GAAGJ,cAAc;EAIlC;;AALWC,SAAU;mBAAVA,SAAS;AAAA;AAATA,SAAU;SAAVA,SAAS;EAAAI,SAATJ,SAAS;EAAAK,YAFR;AAAM;AAStB,OAAO,MAAMC,YAAY,GAAGT,GAAG;;;;;;;KAO1B;AAKH,OAAM,MAAOU,OAAQ,SAAQT,MAAM,CAACG,KAAoC;EAGtEC,YAAYC,MAAqB;IAC/B,KAAK,CAACA,MAAM,CAAC;IAHN,aAAQ,GAAGG,YAAY;EAIhC;;AALWC,OAAQ;mBAARA,OAAO;AAAA;AAAPA,OAAQ;SAARA,OAAO;EAAAH,SAAPG,OAAO;EAAAF,YAFN;AAAM","names":["gql","Apollo","HeroesDocument","HeroesGQL","Query","constructor","apollo","factory","providedIn","HeroDocument","HeroGQL"],"sourceRoot":"","sources":["D:\\Prog courses\\Projs\\Graphql\\Tour of Heroes with nestJS\\tour_of_heroes-frontend\\src\\generated\\graphql.ts"],"sourcesContent":["import { gql } from 'apollo-angular';\nimport { Injectable } from '@angular/core';\nimport * as Apollo from 'apollo-angular';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** Date custom scalar type */\n  Date: any;\n};\n\nexport type HeroQl = {\n  __typename?: 'HeroQl';\n  id: Scalars['Float'];\n  name: Scalars['String'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  addHero: HeroQl;\n  removeHero: Scalars['Boolean'];\n};\n\n\nexport type MutationAddHeroArgs = {\n  newHeroData: NewHeroInput;\n};\n\n\nexport type MutationRemoveHeroArgs = {\n  id: Scalars['Float'];\n};\n\nexport type NewHeroInput = {\n  id: Scalars['Float'];\n  name: Scalars['String'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  hero: HeroQl;\n  heroes: Array<HeroQl>;\n  suggestedHeroes: HeroQl;\n};\n\n\nexport type QueryHeroArgs = {\n  id: Scalars['Float'];\n};\n\n\nexport type QuerySuggestedHeroesArgs = {\n  key: Scalars['String'];\n};\n\nexport type Subscription = {\n  __typename?: 'Subscription';\n  heroAdded: HeroQl;\n};\n\nexport type HeroesQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type HeroesQuery = { __typename?: 'Query', heroes: Array<{ __typename?: 'HeroQl', name: string, id: number }> };\n\nexport type HeroQueryVariables = Exact<{\n  id: Scalars['Float'];\n}>;\n\n\nexport type HeroQuery = { __typename?: 'Query', hero: { __typename?: 'HeroQl', name: string, id: number } };\n\nexport const HeroesDocument = gql`\n    query heroes {\n  heroes {\n    name\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class HeroesGQL extends Apollo.Query<HeroesQuery, HeroesQueryVariables> {\n    override document = HeroesDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }\nexport const HeroDocument = gql`\n    query hero($id: Float!) {\n  hero(id: $id) {\n    name\n    id\n  }\n}\n    `;\n\n  @Injectable({\n    providedIn: 'root'\n  })\n  export class HeroGQL extends Apollo.Query<HeroQuery, HeroQueryVariables> {\n    override document = HeroDocument;\n    \n    constructor(apollo: Apollo.Apollo) {\n      super(apollo);\n    }\n  }"]},"metadata":{},"sourceType":"module","externalDependencies":[]}